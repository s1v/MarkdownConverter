<div style=@Style>
    <FileDropZone class="drop-zone">

        @if (!selectedFiles.Any())
        {
            <InputFile id="inputfile" OnChange=@OnInputFileChanged multiple accept=@allowExtensions Style="display:none;" />
            <label for="inputfile">
                <span class="drop-text">Drag and Drop Markdown Files Here</span>
            </label>
        }
        else
        {
            <div class="result">
                <MudList Style="margin: 1rem; overflow-x: hidden; background-color: rgba(255, 255, 255, 0.05)" Dense="true">
                    @foreach (var file in selectedFiles)
                    {
                        <MudListItem @key="@file.Name">
                            <MudChip Color="Color.Dark"
                             Style="overflow:hidden;"
                             Text="Markdown" />
                            @file.Name
                        </MudListItem>
                    }
                </MudList>

                <MudGrid Justify="Justify.Center" Spacing="4">
                    <MudItem>
                        <MudButton OnClick="InvokeSelectedEvent" Color="Color.Primary" Variant="Variant.Filled">Convert</MudButton>
                    </MudItem>
                    <MudItem>
                        <MudButton OnClick="@selectedFiles.Clear" Color="Color.Error" Variant="Variant.Filled">Clear</MudButton>
                    </MudItem>
                </MudGrid>
            </div>
        }
    </FileDropZone>
</div>

@code {
    [Parameter]
    public EventCallback<InputFileChangeEventArgs> OnFileSelected { get; set; }

    [Parameter]
    public string? Style { get; set; }

    IList<IBrowserFile> selectedFiles = new List<IBrowserFile>();
    string[] allowExtensions = { ".md", ".markdown" };

    async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        await Task.Run(() =>
        {
            selectedFiles = e.GetMultipleFiles(e.FileCount).Where(file => allowExtensions.Contains(Path.GetExtension(file.Name))).ToList();
        });
    }

    async Task InvokeSelectedEvent()
    {
        await OnFileSelected.InvokeAsync(new InputFileChangeEventArgs(new List<IBrowserFile>(selectedFiles)));
    }
}